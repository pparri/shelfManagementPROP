package classes.presentacio;

import controladors.CtrlPresentacio;
import java.awt.BorderLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.swing.JPanel;


/**
 * Classe PrincipalView, conté el panell principal on es carreguen les diferent vistes de l'aplicacio.
 * Aquesta classe es responsable de gestionar les diferents sub-vistes de l'aplicació.
 */
public class PrincipalView extends javax.swing.JFrame {

    private static CtrlPresentacio Ctrl_Presentacio;

    MainView MainView = new MainView(this);
    GenerarPrestView GenerarPrestView = new GenerarPrestView(this);
    PrestatgeView PrestatgeView = new PrestatgeView(this);
    MostrarPrestatgeView MostrarPrestatgeView = new MostrarPrestatgeView(this);
    MostrarCistellaView MostrarCistellaView = new MostrarCistellaView(this);
    GestionarProdView GestionarProdView = new GestionarProdView(this);

    private String pantallaAnterior = "MainView";

    ModificarPrestatgeView ModificarPrestatgeView = new ModificarPrestatgeView(this, pantallaAnterior);

    /**
     * Assigna una nova instancia de PrincipalView i inicialitza els components.
     * 
     * @param Ctrl_Presentacio El controlador de presentacio associat.
     */
    public PrincipalView(CtrlPresentacio Ctrl_Presentacio) {
        this.Ctrl_Presentacio = Ctrl_Presentacio;
        initComponents();
        this.setLocationRelativeTo(null);
       
        showPanel("MainView");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        principal = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(150, 110, 105));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setResizable(false);

        setPreferredSize(new java.awt.Dimension(800, 800));
        setSize(new java.awt.Dimension(800, 800));

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        principal.setBackground(new java.awt.Color(150, 110, 105));
        //principal.setMaximumSize(new java.awt.Dimension(800, 800));
        //principal.setMinimumSize(new java.awt.Dimension(800, 800));
        principal.setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout principalLayout = new javax.swing.GroupLayout(principal);
        principal.setLayout(principalLayout);
        principalLayout.setHorizontalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        principalLayout.setVerticalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    } // </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) { //GEN-FIRST:event_formWindowClosing

        Ctrl_Presentacio.sortir();
        System.exit(0);
    } //GEN-LAST:event_formWindowClosing

    /**
     * Resol el nom de la vista i retorna el panell corresponent.
     * Inicialitza la vista si es necessari.
     *
     * @param view El nom de la vista que es vol obtenir.
     * @return El panell corresponent a la vista especificada.
     */
    private JPanel resolvistanom(String view) {
        if (view.equals("GenerarPrestView")) {
            return GenerarPrestView;
        }
        else if (view.equals("PrestatgeView")) {
            return PrestatgeView;
        }
        else if (view.equals("ModificarPrestatgeView")) {
            return new ModificarPrestatgeView(this, pantallaAnterior);
        }
        else if (view.equals("MostrarPrestatgeView")) {
            return MostrarPrestatgeView;
        }
        else if (view.equals("MostrarCistellaView")) {
            return MostrarCistellaView;
        }
        else if (view.equals("GestionarProdView")) {
            return GestionarProdView;
        }

        return MainView;
    }
    

    /**
     * Mostra el panell corresponent al nom especificat.
     * Inicialitza i configura el panell abans de mostrar-lo.
     *
     * @param vista El nom del panell que es vol mostrar.
     */
    public void showPanel(String vista) {
        if (vista == "PrestatgeView") {
            pantallaAnterior = vista;
        }
        else if (vista == "MostrarPrestatgeView") {
            pantallaAnterior = vista;
        }
        
        JPanel p = resolvistanom(vista);
        setTitle(getTitlePanel(vista));
        p.setSize(getWidth(), getHeight()); 
        p.setLocation(0, 0);
        
        principal.removeAll();
        principal.setLayout(new BorderLayout()); 
        principal.add(p, BorderLayout.CENTER); 
        principal.revalidate();
        principal.repaint();
    }

    /**
     * Aquest mètode escriu el títol de cada panell en la pantalla.
     * 
     * @param nomVista Nom del panell que esta mostrant l'aplicació.
     * @return Nom del títol pel panell que esta mostrant l'aplicació.
     */
    private String getTitlePanel(String nomVista) {
        if (nomVista.equals("MainView")) return "Pantalla Principal";
        else if (nomVista.equals("GenerarPrestView")) return "Algorismes de generació";
        else if (nomVista.equals("PrestatgeView")) return "Prestatge";
        else if (nomVista.equals("ModificarPrestatgeView")) return "Prestatge";
        else if (nomVista.equals("MostrarPrestatgeView")) return "Prestatge";
        else if (nomVista.equals("MostrarCistellaView")) return "Cistella";
        else if (nomVista.equals("GestionarProdView")) return "Gestió de productes";
        else if (nomVista.equals("ModificarProdView")) return "Modificació de productes";
        return "Afegir Producte";
    }

    /**
     * Aquest mètode envia a generar el prestatge, segons l'algorisme escollit.
     * 
     * @param algorisme Integer que ens indica si l'usuari ha escollit un algorisme o l'altre.
     * @throws Exception
     */
    public void generarPrestatge(int algorisme) throws Exception {
        if (algorisme == 1) CtrlPresentacio.generarPrestatgeForcaBruta();
        else CtrlPresentacio.generarPrestatgeDosAprox();
        MostrarPrestatgeView.actualitzarVista();
        PrestatgeView.actualitzarVista();
        ModificarPrestatgeView.actualitzarVista();
    }

    /**
     * Aquest mètode serveix per obtenir les dades de la cistella.
     * 
     * @return LinkedHashMap<String, ArrayList<Double>>
     * @throws IOException
     */
    public LinkedHashMap<String, ArrayList<Double>> obtenirCistella() throws IOException {
        LinkedHashMap<String, ArrayList<Double>> mapaCistella = CtrlPresentacio.llegirCistella();
        return mapaCistella;
    }

    /**
     * Aquest mètode serveix per obtenir les dades del prestatge.
     * 
     * @return ArrayList<String>
     */
    public ArrayList<String> obtenirPrestatge() {
        ArrayList<String> prestatge = CtrlPresentacio.obtenirProdsPrestatge();
        return prestatge;
    }

    /**
     * Aquest mètode serveix per guardar la nova distribució del prestatge si aquesta és modificada des de l'aplicació.
     * 
     * @param distPrestatge Nova distribució del prestatge.
     * @throws Exception
     */
    public void guardarDistribucio(ArrayList<String> distPrestatge) throws Exception {
        CtrlPresentacio.guardarDistPrest(distPrestatge);
        PrestatgeView.actualitzarVista();
        MostrarPrestatgeView.actualitzarVista();
        ModificarPrestatgeView.actualitzarVista();
    }

    /**
     * Aquest mètode serveix per modificar la distribució del prestatge des de l'aplicació.
     * 
     * @param producteA Nom del primer producte del qual es vol canviar la posició amb un altre.
     * @param producteB Nom del segon producte del qual es vol canviar la posició amb el primer.
     */
    public void modificarDistribucio(String producteA, String producteB) {
        CtrlPresentacio.modificarDistPrestatge(producteA, producteB);
        MostrarPrestatgeView.actualitzarVista();
        PrestatgeView.actualitzarVista();
        ModificarPrestatgeView.actualitzarVista();
    }

    /**
     * Mètode que serveix per poder eliminar el prestatge des de l'aplicació.
     * 
     * @throws IOException
     */
    public void eliminarPrestatge() throws IOException {
        CtrlPresentacio.eliminaPrestatge();
        MostrarPrestatgeView.actualitzarVista();
        PrestatgeView.actualitzarVista();
    }

    /**
     * Mètode que serveix per carregar un arxiu d'un producte.
     * 
     * @param filePath path del nou fitxer.
     * @throws Exception
     */
    public void carregaArxiu(String filePath) throws Exception {
        CtrlPresentacio.carregaProducteArxiu(filePath);
        MostrarCistellaView.actualizarVista();
        GestionarProdView.actualizarVista();
    }

    /**
     * Mètode que serveix per guardar un nou producte des de l'aplicació.
     * 
     * @param producte Nom del producte.
     * @param similituds Graus de similitud del producte.
     * @throws Exception
     */
    public void carregaProducte(String producte, Double[] similituds) throws Exception {
        CtrlPresentacio.carregarProducte(producte,similituds);
        MostrarCistellaView.actualizarVista();
        GestionarProdView.actualizarVista();
    }

    /**
     * Mètode per obtenir els productes guardats a la base de dades.
     * 
     * @return HashMap<String, ArrayList<Double>>
     * @throws Exception
     */
    public HashMap<String, ArrayList<Double>> obtenerProductos() throws Exception
    {
        return CtrlPresentacio.obtenerProductos();
    }

    /**
     * Aquest mètode serveix per eliminar un producte des de l'aplicació.
     * 
     * @param id Nom del producte que volem eliminar.
     * @throws Exception
     */
    public void eliminarProducto(String id) throws Exception
    {
        CtrlPresentacio.eliminarProducte(id);
        MostrarCistellaView.actualizarVista();
    }

    /**
     * Mètode per modificar les similituds d'un producte des de l'aplicació.
     * 
     * @param producteA Nom del primer producte del qual es vol modificar una de les seves similituds.
     * @param producteB Nom del segon producte amb el que es vol modificar la similitud del primer.
     * @param sim Nou grau de similitud entre els dos productes.
     * @throws Exception
     */
    public void actualitzaSimilituds (String producteA, String producteB, double sim) throws Exception {
        CtrlPresentacio.modificarGrauSimil(producteA, producteB, sim);
        MostrarCistellaView.actualizarVista();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel principal;
    // End of variables declaration//GEN-END:variables
    
}
